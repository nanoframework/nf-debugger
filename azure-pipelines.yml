trigger:
  branches:
    include:
    - master
    - develop
    - release/*
    - refs/tags/*
  paths:
    exclude:
    - CHANGELOG.md
    - /*.md
    - .gitignore
    - appveyor.yml
  # waiting for feature to become available
  # tags:
  #   include:
  #   - v/*

pr:
  branches:
    include:
    - master
    - develop
    - release/*
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/source/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- checkout: self

- script: |
    git config --global user.email 'nanoframework@outlook.com'
    git config --global user.name 'nfbot'
  displayName: Setup git identity

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayName: NuGet restore

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true'
    configuration: '$(buildConfiguration)'

- task: MSBuild@1
  inputs:
    solution: '**\nanoFramework.Tools.DebugLibrary.Net.csproj'
    configuration: '$(buildConfiguration)'
    msbuildArguments: '/t:pack /p:PublicRelease=true'
  condition: succeeded()
  displayName: Pack .NET NuGet package

- task: MSBuild@1
  inputs:
    solution: '**\nanoFramework.Tools.DebugLibrary.UWP.csproj'
    configuration: '$(buildConfiguration)'
    msbuildArguments: '/t:pack /p:PublicRelease=true'
  condition: succeeded()
  displayName: Pack UWP NuGet package

# we don't have tests (yet)
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
          $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace "\-g$env:NBGV_GitCommitIdShort", ""

          # replace preview with alpha if this is a PR build
          if($env:Build_Reason -eq 'PullRequest')
          {
            $MyNuGetVersion = $MyNuGetVersion -replace "preview", "alpha"
          }

          Write-Host "NuGet build number is $MyNuGetVersion"

          Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"
  condition: succeeded()
  displayName: Get NuGet build number


- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4' 
    addToPath: true
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ) )
  displayName: Setup Ruby

# generate change log
- powershell: |
      gem install github_changelog_generator --quiet --no-ri --no-rdoc
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( startsWith(variables['Build.SourceBranchName'], 'master') ) )
  displayName: Generate change log

# generate change log including future version
- powershell: |
      gem install github_changelog_generator --quiet --no-ri --no-rdoc
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --future-release v$env:MY_NUGET_VERSION
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), startsWith(variables['Build.SourceBranchName'], 'master') )
  displayName: Generate change log

# copy change log to artifacts directory
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'CHANGELOG.md'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ) )
  displayName: Copy Changelog

# push new changelog to GitHub repo
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v$(NBGV_Version)" -m"***NO_CI***"

          git config user.email ${{ parameters.gitEmail }}
          git config user.name ${{ parameters.gitUser }}
          
          # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
          # 'encoded token' is the Base64 of the string "nfbot:personal-token"
          $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

          git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( startsWith(variables['Build.SourceBranchName'], 'master') ) )
  displayName: Push changelog to GitHub

# update could build number (only possible if this is not a PR from a fork)
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: Write-Host "$("##vso[build.updatebuildnumber]")$env:MY_NUGET_VERSION"
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Update cloud build number

- task: CopyFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\nanoFramework.Tools.Debugger.Net.$(MY_NUGET_VERSION).nupkg
      **\nanoFramework.Tools.Debugger.UWP.$(MY_NUGET_VERSION).nupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
  condition: succeeded()
  displayName: Collecting deployable artifacts

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Publish deployables artifacts

# push NuGet packages to MyGet feed (always happens except on PR builds)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'MyGet'
  condition: succeeded()
  displayName: Push NuGet packages to MyGet

# push NuGet class lib package to NuGet (happens on tag builds for any branch)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
  continueOnError: true
  displayName: Push NuGet packages to NuGet

# create or update GitHub release
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: 'nf-debugger'
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: 'nanoFramework Debugger Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from nanoFramework MyGet development feed</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.myget.org/feed/nanoframework-dev/package/nuget/nanoFramework.Tools.Debugger.Net/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)<br>:package: [UWP](https://www.myget.org/feed/nanoframework-dev/package/nuget/nanoFramework.Tools.Debugger.UWP/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: true
    githubReleasePrerelease: true
    githubReuseDraftOnly: true
    githubReuseRelease: true
    githubEditRelease: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ) )
  displayName: Create/Update GitHub release

# create or update GitHub release ON tags from release or master branches
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: 'nf-debugger'
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: 'nanoFramework Debugger Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/nanoFramework.Tools.Debugger.Net/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION) v$(MY_NUGET_VERSION)<br>:package: [UWP](https://www.nuget.org/packages/nanoFramework.Tools.Debugger.UWP/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: false
    githubReleasePrerelease: false
    githubReuseDraftOnly: false
    githubReuseRelease: true
    githubEditRelease: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
  displayName: Create/Update GitHub release

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
