trigger:
  branches:
    include:
    - master
    - develop
    - release/*
    - refs/tags/*
  paths:
    exclude:
    - CHANGELOG.md
    - /*.md
    - .gitignore
    - appveyor.yml
  # waiting for feature to become available
  # tags:
  #   include:
  #   - v/*

pr:
  branches:
    include:
    - master
    - develop
    - release/*
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/source/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- checkout: self

- script: |
    git config --global user.email 'nanoframework@outlook.com'
    git config --global user.name 'nfbot'
  displayName: Setup git identity

# get commit message
- powershell: |

    if($env:Build_SourceBranch -like "refs/pull*")
    {
      # PR build, get PR message

      # need to get PR number from branch as the Azure Pipeline var can't be trusted
      if($env:Build_SourceBranch -match '(?<=(pull\/))\w*(?=(\/))')
      {
        $prNumber = $matches[0]

        $prUrl = "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$prNumber"

        $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Method GET

        $commitMessage = $commit.body
      }
    }
    else
    {
      # not a PR, get subject and commit message for commit
      $commitMessage = git log --format='%B' -1
    }

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    # set variable to foward to jobs
    echo "##vso[task.setvariable variable=COMMIT_MESSAGE;isOutput=true]$commitMessage"
  name: getCommitMessage
  displayName: grab commit message

- task: DotNetCoreCLI@2  
  inputs:
    command: custom
    custom: tool
    arguments: install -g nbgv
  condition: or( eq( variables['StartReleaseCandidate'], true ), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Install NBGV tool

- powershell: |

    # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
    # 'encoded token' is the Base64 of the string "nfbot:personal-token"
    $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

    cd "$env:Agent_TempDirectory" > $null

    git init "$env:Agent_TempDirectory\repo"
    cd repo > $null
    git remote add origin "$env:Build_Repository_Uri"
    git config --global gc.auto 0
    git config --global user.name nfbot
    git config --global user.email nanoframework@outlook.com
    git config --global core.autocrlf true
    git -c http.extraheader="AUTHORIZATION: $auth" fetch --progress origin
    
    git checkout develop
    
    cd source

    nbgv prepare-release
 
    # get commit message for the merge
    $commitMessage = git log -1 --pretty=%B

    # amend commit message to skip build
    git commit --amend -m "$commitMessage" -m "***NO_CI***" > $null

    # push all changes to github
    git -c http.extraheader="AUTHORIZATION: $auth" push --all origin

  condition: eq( variables['StartReleaseCandidate'], true )
  displayName: NBGV prepare release

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud'
    organization: 'nanoframework'
    scannerMode: 'MSBuild'
    projectKey: 'nanoframework_nf-debugger'
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: 'Prepare analysis on SonarCloud'

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '5.4.0'
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: 'Install specific version of NuGet'

- task: Cache@2
  inputs:
    key: 'nuget | packages.lock.json'
    restoreKeys: |
      nuget
    path:  $(Pipeline.Workspace)/.nuget/packages
  displayName: Cache NuGet packages

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: NuGet restore

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true'
    configuration: '$(buildConfiguration)'
  condition: ne( variables['StartReleaseCandidate'], true )

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace "\-g$env:NBGV_GitCommitIdShort", ""

        # replace preview with alpha if this is a PR build
        if($env:Build_Reason -eq 'PullRequest')
        {
          $MyNuGetVersion = $MyNuGetVersion -replace "preview", "alpha"
        }

        Write-Host "NuGet build number is $MyNuGetVersion"

        Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: Get NuGet build number

# update could build number (only possible if this is not a PR from a fork)
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: Write-Host "$("##vso[build.updatebuildnumber]")$env:MY_NUGET_VERSION"
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Update cloud build number

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack source\nanoFramework.Tools.DebugLibrary.Net\nanoFramework.Tools.DebugLibrary.Net.csproj -OutputDirectory source\nanoFramework.Tools.DebugLibrary.Net -Version $(MY_NUGET_VERSION) -properties Configuration=Release;PublicRelease=true;commit="$(Build.SourceVersion)"'
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Pack .NET NuGet package

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack source\nanoFramework.Tools.DebugLibrary.UWP\nanoFramework.Tools.DebugLibrary.UWP.csproj -OutputDirectory source\nanoFramework.Tools.DebugLibrary.UWP -Version $(MY_NUGET_VERSION) -properties Configuration=Release;PublicRelease=true;commit="$(Build.SourceVersion)"'
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Pack UWP NuGet package

# we don't have tests (yet)
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- powershell: |
    # get subject and commit message for commit
    $commitMessage = git log --format='%B' -1

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    if($commitMessage -like "*PUBLISH_RELEASE*")
    {
      # set variable
      Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT;isOutput=true]")False"
      Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")True"
      Write-Host "Release draft: FALSE"
    }
    else
    {
      # set variable
      Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT;isOutput=true]")True"
      Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")False"
      Write-Host "Release draft: TRUE"
    }
  name: SetReleaseDraftVar
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: Set release draft var

- task: SonarCloudAnalyze@1
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: 'Run Code Analysis'

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  condition: ne( variables['StartReleaseCandidate'], true )

- task: UseRubyVersion@0
  inputs:
    versionSpec: '= 2.5' 
    addToPath: true
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Setup Ruby

# generate change log
# - powershell: |
#      gem install github_changelog_generator --quiet --no-ri --no-rdoc
#      # need to call it passing both cache options with full path otherwise it won't work
#      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache
#  condition: and( succeeded(), variables['SetReleaseDraftVar.RELEASE_DRAFT'], not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( startsWith(variables['Build.SourceBranchName'], 'master') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
#  displayName: Generate change log

## generate change log including future version
#- powershell: |
#      gem install github_changelog_generator --quiet --no-ri --no-rdoc
#      # need to call it passing both cache options with full path otherwise it won't work
#      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --future-release v$env:MY_NUGET_VERSION
#  condition: and( succeeded(), or( eq ( variables['SetReleaseDraftVar.RELEASE_VERSION'], 'True' ), and ( not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), startsWith(variables['Build.SourceBranchName'], 'master'), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) ) ), ne( variables['StartReleaseCandidate'], true ) )
#  displayName: Generate change log

## copy change log to artifacts directory
#- task: CopyFiles@2
#  inputs:
#    SourceFolder: '$(System.DefaultWorkingDirectory)'
#    Contents: 'CHANGELOG.md'
#    TargetFolder: '$(Build.ArtifactStagingDirectory)'
#  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), ne( variables['StartReleaseCandidate'], true ) )
#  displayName: Copy Changelog

## push new changelog to GitHub repo
#- task: PowerShell@2
#  inputs:
#      targetType: 'inline'
#      script: |
#          git add CHANGELOG.md
#          git commit -m "Update CHANGELOG for v$(NBGV_Version)" -m"***NO_CI***"
#
#          git config user.email 'nanoframework@outlook.com'
#          git config user.name 'nfbot'
#          
#          # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
#          # 'encoded token' is the Base64 of the string "nfbot:personal-token"
#          $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"
#
#          git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"
#
#  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
#  displayName: Push changelog to GitHub

- task: CopyFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\nanoFramework.Tools.Debugger.Net.$(MY_NUGET_VERSION).nupkg
      **\nanoFramework.Tools.Debugger.UWP.$(MY_NUGET_VERSION).nupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Collecting deployable artifacts

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Publish deployables artifacts

# push NuGet packages to Azure Artifacts feed (always happens except on PR builds)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'AzureArtifacts'
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  continueOnError: true
  displayName: Push NuGet packages to Azure Artifacts

# push NuGet class lib package to NuGet (happens on tag builds for any branch)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet'
  condition: and( succeeded(), or( eq ( variables['SetReleaseDraftVar.RELEASE_VERSION'], 'True' ), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), ne( variables['StartReleaseCandidate'], true ) )
  continueOnError: true
  displayName: Push NuGet packages to NuGet

# update dependencies
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: source/azure-pipelines/update-dependencies.ps1
  condition: or( and( succeeded(), contains(variables['Build.SourceVersionMessage'], '***UPDATE_DEPENDENTS***') ), eq(variables['UPDATE_DEPENDENTS'], 'true') )
  displayName: Update dependent tools

# create or update GitHub release
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: 'nf-debugger'
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: 'nanoFramework Debugger Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from nanoFramework nanoFramework Azure Artifacts development feed</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://dev.azure.com/nanoframework/feed/_packaging?_a=package&feed=sandbox&view=overview&package=nanoFramework.Tools.Debugger.Net&protocolType=NuGet&version=$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)<br>:package: [UWP](https://dev.azure.com/nanoframework/feed/_packaging?_a=package&feed=sandbox&view=overview&package=nanoFramework.Tools.Debugger.UWP&protocolType=NuGet&version=$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: $(RELEASE_DRAFT)
    githubReleasePrerelease: true
    githubReuseDraftOnly: true
    githubReuseRelease: true
    githubEditRelease: true
    githubDeleteEmptyTag: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Create/Update GitHub release

# create or update GitHub release ON tags from release or master branches
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: 'nf-debugger'
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: 'nanoFramework Debugger Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/nanoFramework.Tools.Debugger.Net/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION) v$(MY_NUGET_VERSION)<br>:package: [UWP](https://www.nuget.org/packages/nanoFramework.Tools.Debugger.UWP/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: $(RELEASE_DRAFT)
    githubReleasePrerelease: true
    githubReuseDraftOnly: false
    githubReuseRelease: true
    githubEditRelease: true
    githubDeleteEmptyTag: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], 'preview'), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Create/Update GitHub PREVIEW release 

# create or update GitHub release ON tags from release or master branches
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: 'nf-debugger'
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: 'nanoFramework Debugger Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/nanoFramework.Tools.Debugger.Net/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION) v$(MY_NUGET_VERSION)<br>:package: [UWP](https://www.nuget.org/packages/nanoFramework.Tools.Debugger.UWP/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: false
    githubReleasePrerelease: false
    githubReuseDraftOnly: false
    githubReuseRelease: false
    githubEditRelease: false
    githubDeleteEmptyTag: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'preview') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Create/Update GitHub release

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
